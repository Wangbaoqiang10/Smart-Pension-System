///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        18/Jul/2016  23:49:08 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\dongle例程\dongle usb交互\ZStack-2.5.1a\Projec /
//                          ts\zstack\Samples\SampleApp\Source\SampleApp.c    /
//    Command line       =  -f "F:\dongle例程\dongle                          /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter /
//                          .cfg" (-DCPU32MHZ -DROOT=__near_func              /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          "F:\dongle例程\dongle usb交互\ZStack-2.5.1a\Proje /
//                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\To /
//                          ols\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO          /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=10         /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "F:\dongle例程\dongle      /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\Source\SampleApp.c" -D ZTOOL_P1 -D         /
//                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -lC "F:\dongle例程\dongle     /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\RouterEB\List\" -lA               /
//                          "F:\dongle例程\dongle usb交互\ZStack-2.5.1a\Proje /
//                          cts\zstack\Samples\SampleApp\CC2530DB\RouterEB\Li /
//                          st\" --diag_suppress Pe001,Pa010 -o               /
//                          "F:\dongle例程\dongle usb交互\ZStack-2.5.1a\Proje /
//                          cts\zstack\Samples\SampleApp\CC2530DB\RouterEB\Ob /
//                          j\" -e --no_code_motion --debug --core=plain      /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "F:\dongle例程\dongle     /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\" -I "F:\dongle例程\dongle        /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\Source\" -I                    /
//                          "F:\dongle例程\dongle usb交互\ZStack-2.5.1a\Proje /
//                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZM /
//                          ain\TI2530DB\" -I "F:\dongle例程\dongle           /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\hal\inc /
//                          lude\" -I "F:\dongle例程\dongle                   /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\hal\tar /
//                          get\CC2530EB\" -I "F:\dongle例程\dongle           /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\mac\inc /
//                          lude\" -I "F:\dongle例程\dongle                   /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\mac\hig /
//                          h_level\" -I "F:\dongle例程\dongle                /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\mac\low /
//                          _level\srf04\" -I "F:\dongle例程\dongle           /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\mac\low /
//                          _level\srf04\single_chip\" -I                     /
//                          "F:\dongle例程\dongle usb交互\ZStack-2.5.1a\Proje /
//                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. /
//                          \..\Components\mt\" -I "F:\dongle例程\dongle      /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\osal\in /
//                          clude\" -I "F:\dongle例程\dongle                  /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\service /
//                          s\saddr\" -I "F:\dongle例程\dongle                /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\service /
//                          s\sdata\" -I "F:\dongle例程\dongle                /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\stack\a /
//                          f\" -I "F:\dongle例程\dongle                      /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\stack\n /
//                          wk\" -I "F:\dongle例程\dongle                     /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\stack\s /
//                          api\" -I "F:\dongle例程\dongle                    /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\stack\s /
//                          ec\" -I "F:\dongle例程\dongle                     /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\stack\s /
//                          ys\" -I "F:\dongle例程\dongle                     /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\stack\z /
//                          do\" -I "F:\dongle例程\dongle                     /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\zmac\"  /
//                          -I "F:\dongle例程\dongle                          /
//                          usb交互\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8 /
//                          w\" -Ohz                                          /
//    List file          =  F:\dongle例程\dongle usb交互\ZStack-2.5.1a\Projec /
//                          ts\zstack\Samples\SampleApp\CC2530DB\RouterEB\Lis /
//                          t\SampleApp.s51                                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??SampleApp_CallBack?relay,0203H
        FUNCTION ??SampleApp_ConnectReqProcess?relay,0203H
        FUNCTION ??SampleApp_DeviceConnect?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        FUNCTION ??SampleApp_ProcessMSGCmd?relay,0203H
        FUNCTION ??SampleApp_Send?relay,0203H
        FUNCTION SampleApp_CallBack,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SampleApp_ClusterList
        FUNCTION SampleApp_ConnectReqProcess,021203H
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 51, STACK
        FUNCTION SampleApp_DeviceConnect,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 53, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        FUNCTION SampleApp_ProcessMSGCmd,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 44, STACK
        FUNCTION SampleApp_Send,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 45, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_epDesc
        PUBWEAK __Constant_1
        PUBLIC recvCount
        PUBLIC sendAck
        PUBLIC sendCount
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalUARTOpen         SYMBOL "HalUARTOpen"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
HalLedSet           SYMBOL "HalLedSet"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
AF_DataRequest      SYMBOL "AF_DataRequest"
osal_set_event      SYMBOL "osal_set_event"
osal_memcpy         SYMBOL "osal_memcpy"
sprintf             SYMBOL "sprintf"
HalUARTWrite        SYMBOL "HalUARTWrite"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
HalUARTRead         SYMBOL "HalUARTRead"
HalLedBlink         SYMBOL "HalLedBlink"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
strlen              SYMBOL "strlen"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??NLME_GetCoordShortAddr?relay SYMBOL "?relay", NLME_GetCoordShortAddr
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??sprintf?relay     SYMBOL "?relay", sprintf
??strlen?relay      SYMBOL "?relay", strlen
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??NLME_GetCoordShortAddr?relay
        FUNCTION ??NLME_GetCoordShortAddr?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H
        EXTERN ??strlen?relay
        FUNCTION ??strlen?relay,00H

// F:\dongle例程\dongle usb交互\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /*********************************************************************
//    2  * INCLUDES
//    3  */
//    4 
//    5 #include <stdio.h>
//    6 #include <string.h>
//    7 #include "AF.h"
//    8 #include "OnBoard.h"
//    9 #include "OSAL_Tasks.h"
//   10 #include "SampleApp.h"
//   11 #include "ZDApp.h"
//   12 #include "ZDObject.h"
//   13 #include "ZDProfile.h"
//   14 
//   15 #include "hal_drivers.h"
//   16 #include "hal_key.h"
//   17 #if defined ( LCD_SUPPORTED )
//   18   #include "hal_lcd.h"
//   19 #endif
//   20 #include "hal_led.h"
//   21 #include "hal_uart.h"
//   22 
//   23 
//   24 #define LCD_DEBUG
//   25 
//   26 #ifdef LCD_DEBUG

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   27 uint32  sendCount=0;//发包个数
sendCount:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   28 uint32  sendAck=0;//收到ACK个数
sendAck:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   29 uint32  recvCount=0;//收到数据包个数
recvCount:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   30 #endif
//   31 
//   32 /*********************************************************************
//   33  * MACROS
//   34  */
//   35 
//   36 /*********************************************************************
//   37  * CONSTANTS
//   38  */
//   39 
//   40 #if !defined( SAMPLE_APP_PORT )
//   41 #define SAMPLE_APP_PORT  0
//   42 #endif
//   43 
//   44 #if !defined( SAMPLE_APP_BAUD )
//   45   #define SAMPLE_APP_BAUD  HAL_UART_BR_115200
//   46 #endif
//   47 
//   48 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//   49 #if !defined( SAMPLE_APP_THRESH )
//   50 #define SAMPLE_APP_THRESH  64
//   51 #endif
//   52 
//   53 #if !defined( SAMPLE_APP_RX_SZ )
//   54 #define SAMPLE_APP_RX_SZ  128
//   55 #endif
//   56 
//   57 #if !defined( SAMPLE_APP_TX_SZ )
//   58 #define SAMPLE_APP_TX_SZ  128
//   59 #endif
//   60 
//   61 // Millisecs of idle time after a byte is received before invoking Rx callback.
//   62 #if !defined( SAMPLE_APP_IDLE )
//   63 #define SAMPLE_APP_IDLE  6
//   64 #endif
//   65 
//   66 // Loopback Rx bytes to Tx for throughput testing.
//   67 #if !defined( SAMPLE_APP_LOOPBACK )
//   68 #define SAMPLE_APP_LOOPBACK  FALSE
//   69 #endif
//   70 
//   71 // This is the max byte count per OTA message.
//   72 #if !defined( SAMPLE_APP_TX_MAX )
//   73 #define SAMPLE_APP_TX_MAX  80
//   74 #endif
//   75 
//   76 #define SAMPLE_APP_RSP_CNT  4
//   77 
//   78 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   79 const cId_t SampleApp_ClusterList[SAMPLE_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4
//   80 {
//   81   SAMPLEAPP_CLUSTERID1,
//   82   SAMPLEAPP_CLUSTERID2,
//   83   SAMPLEAPP_CONNECTREQ_CLUSTER,            
//   84   SAMPLEAPP_CONNECTRSP_CLUSTER             
//   85 };
//   86 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   87 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 11
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 4
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 4
        DATA16
        DW SampleApp_ClusterList
//   88 {
//   89   SAMPLEAPP_ENDPOINT,              //  int   Endpoint;
//   90   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//   91   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//   92   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   93   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//   94   SAMPLE_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   95   (cId_t *)SampleApp_ClusterList,  //  byte *pAppInClusterList;
//   96   SAMPLE_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
//   97   (cId_t *)SampleApp_ClusterList   //  byte *pAppOutClusterList;
//   98 };
//   99 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  100 endPointDesc_t SampleApp_epDesc =
SampleApp_epDesc:
        DATA8
        DS 6
        REQUIRE `?<Initializer for SampleApp_epDesc>`
        REQUIRE __INIT_XDATA_I
//  101 {
//  102   SAMPLEAPP_ENDPOINT,
//  103  &SampleApp_TaskID,
//  104   (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc,
//  105   noLatencyReqs
//  106 };
//  107 
//  108 /*********************************************************************
//  109  * TYPEDEFS
//  110  */
//  111 
//  112 /*********************************************************************
//  113  * GLOBAL VARIABLES
//  114  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  115 devStates_t SampleApp_NwkState;   
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  116 uint8 SampleApp_TaskID;           // Task ID for internal task/event processing.
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  117 
//  118 /*********************************************************************
//  119  * EXTERNAL VARIABLES
//  120  */
//  121 
//  122 /*********************************************************************
//  123  * EXTERNAL FUNCTIONS
//  124  */
//  125 
//  126 /*********************************************************************
//  127  * LOCAL VARIABLES
//  128  */
//  129 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  130 static uint8 SampleApp_MsgID;
SampleApp_MsgID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  131 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  132 static afAddrType_t SampleApp_TxAddr;
SampleApp_TxAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 static uint8 SampleApp_TxSeq;
SampleApp_TxSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  134 static uint8 SampleApp_TxBuf[SAMPLE_APP_TX_MAX+1];
SampleApp_TxBuf:
        DS 81
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  135 static uint8 SampleApp_TxLen;
SampleApp_TxLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  136 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  137 static afAddrType_t SampleApp_RxAddr;
SampleApp_RxAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 static uint8 SampleApp_RxSeq;
SampleApp_RxSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  139 static uint8 SampleApp_RspBuf[SAMPLE_APP_RSP_CNT];
SampleApp_RspBuf:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  140 
//  141 /*********************************************************************
//  142  * LOCAL FUNCTIONS
//  143  */
//  144 
//  145 static void SampleApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
//  146 static void SampleApp_Send(void);
//  147 static void SampleApp_Resp(void);
//  148 static void SampleApp_CallBack(uint8 port, uint8 event); 
//  149 static void SampleApp_DeviceConnect(void);              
//  150 static void SampleApp_DeviceConnectRsp(uint8*);         
//  151 static void SampleApp_ConnectReqProcess(uint8*);           
//  152 
//  153 /*********************************************************************
//  154  * @fn      SampleApp_Init
//  155  *
//  156  * @brief   This is called during OSAL tasks' initialization.
//  157  *
//  158  * @param   task_id - the Task ID assigned by OSAL.
//  159  *
//  160  * @return  none
//  161  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  162 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  163 {
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R1
        MOV     R6,A
//  164   halUARTCfg_t uartConfig;
//  165 
//  166   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  167   SampleApp_RxSeq = 0xC3;
        MOV     DPTR,#SampleApp_RxSeq
        MOV     A,#-0x3d
        MOVX    @DPTR,A
//  168   SampleApp_NwkState = DEV_INIT;       
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  169   
//  170   afRegister( (endPointDesc_t *)&SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  171 
//  172   RegisterForKeys( task_id );
        ; Setup parameters for call to function RegisterForKeys
        MOV     A,R6
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  173 
//  174   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  175   uartConfig.baudRate             = SAMPLE_APP_BAUD;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  176   uartConfig.flowControl          = FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  177   uartConfig.flowControlThreshold = SAMPLE_APP_THRESH; // 2x30 don't care - see uart driver.
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  178   uartConfig.rx.maxBufSize        = SAMPLE_APP_RX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  179   uartConfig.tx.maxBufSize        = SAMPLE_APP_TX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  180   uartConfig.idleTimeout          = SAMPLE_APP_IDLE;   // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  181   uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  182   uartConfig.callBackFunc         = SampleApp_CallBack;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??SampleApp_CallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??SampleApp_CallBack?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  183   HalUARTOpen (SAMPLE_APP_PORT, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  184 
//  185 #if defined ( LCD_SUPPORTED )
//  186   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "SampleApp">` & 0xff
        MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  187 #endif
//  188   
//  189   ZDO_RegisterForZDOMsg( SampleApp_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  190   ZDO_RegisterForZDOMsg( SampleApp_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  191 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  192 
//  193 /*********************************************************************
//  194  * @fn      SampleApp_ProcessEvent
//  195  *
//  196  * @brief   Generic Application Task event processor.
//  197  *
//  198  * @param   task_id  - The OSAL assigned task ID.
//  199  * @param   events   - Bit map of events to process.
//  200  *
//  201  * @return  Event flags of all unprocessed events.
//  202  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  203 UINT16 SampleApp_ProcessEvent( uint8 task_id, UINT16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  204 {
        FUNCALL SampleApp_ProcessEvent, SampleApp_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_DeviceConnect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_ProcessMSGCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  205   (void)task_id;  // Intentionally unreferenced parameter
//  206   
//  207   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??SampleApp_ProcessEvent_0
//  208   {
//  209     afIncomingMSGPacket_t *MSGpkt;
//  210 
//  211     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID )) )
//  212     {
//  213       switch ( MSGpkt->hdr.event )
//  214       {
//  215       case AF_INCOMING_MSG_CMD:
//  216         SampleApp_ProcessMSGCmd( MSGpkt );
//  217         break;
//  218         
//  219       case ZDO_STATE_CHANGE:
//  220         SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  221         if ( (SampleApp_NwkState == DEV_ZB_COORD)
//  222             || (SampleApp_NwkState == DEV_ROUTER)
//  223             || (SampleApp_NwkState == DEV_END_DEVICE) )
//  224         {
//  225             // Start sending the periodic message in a regular interval.
//  226             HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
//  227             
//  228             if(SampleApp_NwkState != DEV_ZB_COORD)
//  229               SampleApp_DeviceConnect();              
//  230         }
//  231         else
//  232         {
//  233           // Device is no longer in the network
//  234         }
//  235         break;
//  236 
//  237       default:
//  238         break;
//  239       }
//  240 
//  241       osal_msg_deallocate( (uint8 *)MSGpkt );
//  242     }
//  243 
//  244     return ( events ^ SYS_EVENT_MSG );
//  245   }
//  246 
//  247   if ( events & SAMPLEAPP_SEND_EVT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_1
//  248   {
//  249     SampleApp_Send();
        ; Setup parameters for call to function SampleApp_Send
        LCALL   ??SampleApp_Send?relay
//  250     return ( events ^ SAMPLEAPP_SEND_EVT );
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
??SampleApp_ProcessEvent_2:
        MOV     R3,A
        LJMP    ??SampleApp_ProcessEvent_3 & 0xFFFF
//  251   }
??SampleApp_ProcessEvent_4:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??SampleApp_ProcessEvent_5
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_5
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_6
??SampleApp_ProcessEvent_5:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
        MOV     DPTR,#SampleApp_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??SampleApp_ProcessEvent_6
        ; Setup parameters for call to function SampleApp_DeviceConnect
        LCALL   ??SampleApp_DeviceConnect?relay
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
??SampleApp_ProcessEvent_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SampleApp_ProcessEvent_7
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_8
        ADD     A,#0x49
        JZ      ??SampleApp_ProcessEvent_4
        SJMP    ??SampleApp_ProcessEvent_6
??SampleApp_ProcessEvent_8:
        ; Setup parameters for call to function SampleApp_ProcessMSGCmd
        LCALL   ??SampleApp_ProcessMSGCmd?relay
        SJMP    ??SampleApp_ProcessEvent_6
??SampleApp_ProcessEvent_7:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??SampleApp_ProcessEvent_2
//  252 
//  253   if ( events & SAMPLEAPP_RESP_EVT )
??SampleApp_ProcessEvent_1:
        ANL     A,#0x2
        JZ      ??SampleApp_ProcessEvent_9
//  254   {
//  255     SampleApp_Resp();
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#SampleApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SampleApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#SampleApp_RspBuf & 0xff
        MOV     ?V0 + 1,#(SampleApp_RspBuf >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x0
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_RxAddr & 0xff
        MOV     R3,#(SampleApp_RxAddr >> 8) & 0xff
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        JZ      ??CrossCallReturnLabel_22
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        LCALL   ?Subroutine4 & 0xFFFF
//  256     return ( events ^ SAMPLEAPP_RESP_EVT );
??CrossCallReturnLabel_22:
        MOV     A,R6
        XRL     A,#0x2
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_3
//  257   }
//  258 
//  259   return ( 0 );  // Discard unknown events.
??SampleApp_ProcessEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock2
??SampleApp_ProcessEvent_3:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  260 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     R3,#0x0
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0
//  261 
//  262 /*********************************************************************
//  263  * @fn      SerialApp_ProcessMSGCmd
//  264  *
//  265  * @brief   Data message processor callback. This function processes
//  266  *          any incoming data - probably from other devices. Based
//  267  *          on the cluster ID, perform the intended action.
//  268  *
//  269  * @param   pkt - pointer to the incoming message packet
//  270  *
//  271  * @return  TRUE if the 'pkt' parameter is being used and will be freed later,
//  272  *          FALSE otherwise.
//  273  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  274 void SampleApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
SampleApp_ProcessMSGCmd:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function SampleApp_ProcessMSGCmd
        CODE
//  275 {
        FUNCALL SampleApp_ProcessMSGCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, SampleApp_ConnectReqProcess
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  276   uint8 stat;
//  277   uint8 seqnb;
//  278   uint8 delay;
//  279 
//  280   switch ( pkt->clusterId )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SampleApp_ProcessMSGCmd>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??CrossCallReturnLabel_6
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_ProcessMSGCmd_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_ProcessMSGCmd_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_ProcessMSGCmd_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_ProcessMSGCmd_3
        CODE
//  281   {
//  282   // A message with a serial data block to be transmitted on the serial port.
//  283   case SAMPLEAPP_CLUSTERID1: //收到发送过来的数据通过串口输出到电脑显示
//  284     // Store the address for sending and retrying.
//  285     osal_memcpy(&SampleApp_RxAddr, &(pkt->srcAddr), sizeof( afAddrType_t ));
??SampleApp_ProcessMSGCmd_0:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R6
        ADD     A,#0x6
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#SampleApp_RxAddr & 0xff
        MOV     R3,#(SampleApp_RxAddr >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
//  286 
//  287     seqnb = pkt->cmd.Data[0];
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV     ?V0 + 0,A
//  288 
//  289 #ifdef LCD_DEBUG      
//  290       {
//  291         uint8 buff[20]={0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0x14
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  292         sprintf(buff, "R:%d", recvCount++);
        MOV     DPTR,#recvCount
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     ?V0 + 8,?V0 + 4
        MOV     ?V0 + 9,?V0 + 5
        MOV     ?V0 + 10,?V0 + 6
        MOV     ?V0 + 11,?V0 + 7
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 8
        LCALL   ?L_ADD_X
        MOV     DPTR,#recvCount
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_TO_X
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     R4,#`?<Constant "R:%d">` & 0xff
        MOV     R5,#(`?<Constant "R:%d">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
//  293         HalLcdWriteString( buff, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  294       }
//  295 #endif
//  296 
//  297 
//  298     // Keep message if not a repeat packet
//  299     if ( (seqnb > SampleApp_RxSeq) ||                    // Normal
//  300         ((seqnb < 0x80 ) && ( SampleApp_RxSeq > 0x80)) ) // Wrap-around
        MOV     DPTR,#SampleApp_RxSeq
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0 + 0
        JC      ??SampleApp_ProcessMSGCmd_4
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#-0x80
        JNC     ??SampleApp_ProcessMSGCmd_5
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x7f
        JC      ??SampleApp_ProcessMSGCmd_5
//  301     {
//  302         // Transmit the data on the serial port. // 通过串口发送数据到PC机
//  303         if ( HalUARTWrite( SAMPLE_APP_PORT, pkt->cmd.Data+1, (pkt->cmd.DataLength-1) ) )
??SampleApp_ProcessMSGCmd_4:
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOV     R5,A
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        ADD     A,#0x1
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??SampleApp_ProcessMSGCmd_6
//  304         {
//  305           // Save for next incoming message
//  306           SampleApp_RxSeq = seqnb;
        MOV     A,?V0 + 0
        MOV     DPTR,#SampleApp_RxSeq
        MOVX    @DPTR,A
//  307           stat = OTA_SUCCESS;
        CLR     A
        SJMP    ??SampleApp_ProcessMSGCmd_7
//  308         }
//  309         else
//  310         {
//  311           stat = OTA_SER_BUSY;
??SampleApp_ProcessMSGCmd_6:
        MOV     A,#0x2
        MOV     R0,#0x10
        SJMP    ??SampleApp_ProcessMSGCmd_8
//  312         }
//  313     }
//  314     else
//  315     {
//  316         stat = OTA_DUP_MSG;
??SampleApp_ProcessMSGCmd_5:
        MOV     A,#0x1
??SampleApp_ProcessMSGCmd_7:
        MOV     R0,#0x1
//  317     }
//  318 
//  319     // Select approproiate OTA flow-control delay.
//  320     delay = (stat == OTA_SER_BUSY) ? SAMPLEAPP_NAK_DELAY : SAMPLEAPP_ACK_DELAY;
//  321 
//  322     // Build & send OTA response message.
//  323     SampleApp_RspBuf[0] = stat;
??SampleApp_ProcessMSGCmd_8:
        MOV     DPTR,#SampleApp_RspBuf
        MOVX    @DPTR,A
//  324     SampleApp_RspBuf[1] = seqnb;
        MOV     A,?V0 + 0
        INC     DPTR
        MOVX    @DPTR,A
//  325     SampleApp_RspBuf[2] = LO_UINT16( delay );
        MOV     A,R0
        INC     DPTR
        MOVX    @DPTR,A
//  326     SampleApp_RspBuf[3] = HI_UINT16( delay );
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  327     osal_set_event( SampleApp_TaskID, SAMPLEAPP_RESP_EVT ); //收到数据后，发送一个响应事件
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        MOV     R3,A
        LCALL   ??Subroutine13_0 & 0xFFFF
//  328     osal_stop_timerEx(SampleApp_TaskID, SAMPLEAPP_RESP_EVT);
??CrossCallReturnLabel_24:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x2
        MOV     R3,#0x0
??SampleApp_ProcessMSGCmd_9:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  329     break;
        LJMP    ??CrossCallReturnLabel_6 & 0xFFFF
//  330 
//  331   // A response to a received serial data block.   // 发送数据之后，接到响应消息
//  332   case SAMPLEAPP_CLUSTERID2:
//  333 
//  334 
//  335 #ifdef LCD_DEBUG      
//  336       {
//  337         uint8 buff[20]={0};
??SampleApp_ProcessMSGCmd_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_1` & 0xff
        MOV     A,#0x14
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  338         sprintf(buff, "A:%d", sendAck++);
        MOV     DPTR,#sendAck
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 4
        LCALL   ?L_ADD_X
        MOV     DPTR,#sendAck
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     R4,#`?<Constant "A:%d">` & 0xff
        MOV     R5,#(`?<Constant "A:%d">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
//  339         HalLcdWriteString( buff, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  340       }
//  341 #endif
//  342 
//  343     
//  344     if ((pkt->cmd.Data[1] == SampleApp_TxSeq) &&
//  345        ((pkt->cmd.Data[0] == OTA_SUCCESS) || (pkt->cmd.Data[0] == OTA_DUP_MSG)))
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#SampleApp_TxSeq
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??SampleApp_ProcessMSGCmd_10
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        JZ      ??SampleApp_ProcessMSGCmd_11
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_18:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_ProcessMSGCmd_10
//  346     {
//  347       SampleApp_TxLen = 0;
??SampleApp_ProcessMSGCmd_11:
        MOV     DPTR,#SampleApp_TxLen
        CLR     A
        MOVX    @DPTR,A
//  348       osal_stop_timerEx(SampleApp_TaskID, SAMPLEAPP_SEND_EVT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,A
        LJMP    ??SampleApp_ProcessMSGCmd_9 & 0xFFFF
//  349     }
//  350     else
//  351     {
//  352       // Re-start timeout according to delay sent from other device.
//  353       delay = BUILD_UINT16( pkt->cmd.Data[2], pkt->cmd.Data[3] );
//  354       osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_EVT, delay );
??SampleApp_ProcessMSGCmd_10:
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine3 & 0xFFFF
//  355     }
??CrossCallReturnLabel_3:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        SJMP    ??CrossCallReturnLabel_6
//  356     break;
//  357 
//  358     case SAMPLEAPP_CONNECTREQ_CLUSTER:
//  359       SampleApp_ConnectReqProcess((uint8*)pkt->cmd.Data);
??SampleApp_ProcessMSGCmd_2:
        ; Setup parameters for call to function SampleApp_ConnectReqProcess
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??SampleApp_ConnectReqProcess?relay
//  360       
//  361     case SAMPLEAPP_CONNECTRSP_CLUSTER:
//  362       SampleApp_DeviceConnectRsp((uint8*)pkt->cmd.Data);
??SampleApp_ProcessMSGCmd_3:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#SampleApp_TxAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     DPTR,#SampleApp_TxAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine6 & 0xFFFF
//  363       
//  364     default:
//  365       break;
//  366   }
//  367 }
??CrossCallReturnLabel_6:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_19:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_8
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_9
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_10
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_21:
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_8
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_9
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_10
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_2
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_3
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_0
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_1
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond30 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_17:
        INC     DPTR
        RET
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiPicker35 Using cfiCommon1
        CFI (cfiPicker35) NoFunction
        CFI (cfiPicker35) Picker
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_16:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiPicker35

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond36 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_3
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_0
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_1
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_20:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40
//  368 
//  369 /*********************************************************************
//  370  * @fn      SerialApp_Send
//  371  *
//  372  * @brief   Send data OTA.
//  373  *
//  374  * @param   none
//  375  *
//  376  * @return  none
//  377  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  378 static void SampleApp_Send(void)
SampleApp_Send:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI Function SampleApp_Send
        CODE
//  379 {
        FUNCALL SampleApp_Send, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
//  380 #if SAMPLE_APP_LOOPBACK
//  381     if (SampleApp_TxLen < SAMPLE_APP_TX_MAX)
//  382     {
//  383         SampleApp_TxLen += HalUARTRead(SAMPLE_APP_PORT, SampleApp_TxBuf+SampleApp_TxLen+1,
//  384                                                       SAMPLE_APP_TX_MAX-SampleApp_TxLen);
//  385     }
//  386   
//  387     if (SampleApp_TxLen)
//  388     {
//  389       (void)SampleApp_TxAddr;
//  390       if (HalUARTWrite(SAMPLE_APP_PORT, SampleApp_TxBuf+1, SampleApp_TxLen))
//  391       {
//  392         SampleApp_TxLen = 0;
//  393       }
//  394       else
//  395       {
//  396         osal_set_event(SampleApp_TaskID, SAMPLEAPP_SEND_EVT);
//  397       }
//  398     }
//  399 #else
//  400     if (!SampleApp_TxLen && 
//  401         (SampleApp_TxLen = HalUARTRead(SAMPLE_APP_PORT, SampleApp_TxBuf+1, SAMPLE_APP_TX_MAX)))
        MOV     DPTR,#SampleApp_TxLen
        MOVX    A,@DPTR
        JNZ     ??SampleApp_Send_0
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x50
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_TxBuf + 1) & 0xff
        MOV     R3,#((SampleApp_TxBuf + 1) >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     A,R2
        MOV     DPTR,#SampleApp_TxLen
        MOVX    @DPTR,A
        JNZ     $+5
        LJMP    ??SampleApp_Send_1 & 0xFFFF
//  402     {
//  403       // Pre-pend sequence number to the Tx message.
//  404       SampleApp_TxBuf[0] = ++SampleApp_TxSeq;
        MOV     DPTR,#SampleApp_TxSeq
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        MOV     DPTR,#SampleApp_TxBuf
        MOVX    @DPTR,A
//  405     }
//  406   
//  407     if (SampleApp_TxLen)
//  408     {
//  409       if (afStatus_SUCCESS != AF_DataRequest(&SampleApp_TxAddr,
//  410                                              (endPointDesc_t *)&SampleApp_epDesc,
//  411                                               SAMPLEAPP_CLUSTERID1,
//  412                                               SampleApp_TxLen+1, SampleApp_TxBuf,
//  413                                               &SampleApp_MsgID, 0, AF_DEFAULT_RADIUS))
??SampleApp_Send_0:
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     ?V0 + 0,#SampleApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SampleApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V0 + 0,#SampleApp_TxBuf & 0xff
        MOV     ?V0 + 1,#(SampleApp_TxBuf >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     DPTR,#SampleApp_TxLen
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 45)
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,R1
        JZ      ??SampleApp_Send_2
//  414       {
//  415         osal_set_event(SampleApp_TaskID, SAMPLEAPP_SEND_EVT);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        LCALL   ?Subroutine4 & 0xFFFF
//  416       }
??CrossCallReturnLabel_23:
        SJMP    ??SampleApp_Send_1
//  417 #ifdef LCD_DEBUG      
//  418       else
//  419       {
//  420         uint8 buff[20]={0};
??SampleApp_Send_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_2` & 0xff
        MOV     A,#0x14
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  421         sprintf(buff, "s:%d", sendCount++);
        MOV     DPTR,#sendCount
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 4
        LCALL   ?L_ADD_X
        MOV     DPTR,#sendCount
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     R4,#`?<Constant "s:%d">` & 0xff
        MOV     R5,#(`?<Constant "s:%d">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
//  422         HalLcdWriteString( buff, HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  423       }
//  424 #endif
//  425     }
//  426 #endif
//  427 }
??SampleApp_Send_1:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock41
//  428 
//  429 /*********************************************************************
//  430  * @fn      SerialApp_Resp
//  431  *
//  432  * @brief   Send data OTA.
//  433  *
//  434  * @param   none
//  435  *
//  436  * @return  none
//  437  */
//  438 static void SampleApp_Resp(void)
//  439 {
//  440   if (afStatus_SUCCESS != AF_DataRequest(&SampleApp_RxAddr,
//  441                                          (endPointDesc_t *)&SampleApp_epDesc,
//  442                                           SAMPLEAPP_CLUSTERID2,
//  443                                           SAMPLE_APP_RSP_CNT, SampleApp_RspBuf,
//  444                                          &SampleApp_MsgID, 0, AF_DEFAULT_RADIUS))
//  445   {
//  446     osal_set_event(SampleApp_TaskID, SAMPLEAPP_RESP_EVT);
//  447   }
//  448 }
//  449 
//  450 /*********************************************************************
//  451  * @fn      SampleApp_CallBack
//  452  *
//  453  * @brief   Send data OTA.
//  454  *
//  455  * @param   port - UART port.
//  456  * @param   event - the UART port event flag.
//  457  *
//  458  * @return  none
//  459  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  460 static void SampleApp_CallBack(uint8 port, uint8 event)
SampleApp_CallBack:
        CFI Block cfiBlock42 Using cfiCommon0
        CFI Function SampleApp_CallBack
        CODE
//  461 {
        FUNCALL SampleApp_CallBack, SampleApp_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  462   (void)port;
//  463 
//  464   if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
//  465 #if SAMPLE_APP_LOOPBACK
//  466       (SampleApp_TxLen < SAMPLE_APP_TX_MAX))
//  467 #else
//  468       !SampleApp_TxLen)
        MOV     A,#0x7
        ANL     A,R6
        JZ      ??SampleApp_CallBack_0
        MOV     DPTR,#SampleApp_TxLen
        MOVX    A,@DPTR
        JNZ     ??SampleApp_CallBack_0
//  469 #endif
//  470   {
//  471     SampleApp_Send();
        ; Setup parameters for call to function SampleApp_Send
        LCALL   ??SampleApp_Send?relay
//  472   }
//  473 }
??SampleApp_CallBack_0:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock42
//  474 
//  475 /*********************************************************************
//  476 *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  477 void  SampleApp_DeviceConnect()              
SampleApp_DeviceConnect:
        CFI Block cfiBlock43 Using cfiCommon0
        CFI Function SampleApp_DeviceConnect
        CODE
//  478 {
        FUNCALL SampleApp_DeviceConnect, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_DeviceConnect, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_DeviceConnect, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_DeviceConnect, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_DeviceConnect, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_DeviceConnect, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_DeviceConnect, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  479 #if ZDO_COORDINATOR
//  480   
//  481 #else
//  482   
//  483   uint16 nwkAddr;
//  484   uint16 parentNwkAddr;
//  485   char buff[30] = {0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_3` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_3` & 0xff
        MOV     A,#0x1e
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  486   
//  487   HalLedBlink( HAL_LED_2, 3, 50, (1000 / 4) );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x6
        MOV     R5,A
        MOV     R3,#0x32
        MOV     R2,#0x3
        MOV     R1,#0x2
        LCALL   ??HalLedBlink?relay
//  488   
//  489   nwkAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  490   parentNwkAddr = NLME_GetCoordShortAddr();
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   ??NLME_GetCoordShortAddr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//  491   sprintf(buff, "parent:%d   self:%d\r\n", parentNwkAddr, nwkAddr);
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     R4,#`?<Constant "parent:%d   self:%d\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "parent:%d   self:%d\\r\\n">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  492   HalUARTWrite ( 0, (uint8*)buff, strlen(buff));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        LCALL   ?Subroutine5 & 0xFFFF
//  493   
//  494   SampleApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
??CrossCallReturnLabel_4:
        MOV     DPTR,#SampleApp_TxAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  495   SampleApp_TxAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
//  496   SampleApp_TxAddr.addr.shortAddr = parentNwkAddr;
        MOV     DPTR,#SampleApp_TxAddr
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  497   
//  498   buff[0] = HI_UINT16( nwkAddr );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  499   buff[1] = LO_UINT16( nwkAddr );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  500   
//  501   if ( AF_DataRequest( &SampleApp_TxAddr, &SampleApp_epDesc,
//  502                        SAMPLEAPP_CONNECTREQ_CLUSTER,
//  503                        2,
//  504                        (uint8*)buff,
//  505                        &SampleApp_MsgID, 
//  506                        0, 
//  507                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     ?V0 + 0,#SampleApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SampleApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 47)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 49)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 51)
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 53)
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  508   {
//  509   }
//  510   else
//  511   {
//  512     // Error occurred in request to send.
//  513   }
//  514   
//  515 #endif    //ZDO_COORDINATOR
//  516 }
        MOV     A,#0x1e
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 53)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 51)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        MOV     R1,#0x0
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_TxAddr & 0xff
        MOV     R3,#(SampleApp_TxAddr >> 8) & 0xff
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 53)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 51)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker58 Using cfiCommon1
        CFI (cfiPicker58) NoFunction
        CFI (cfiPicker58) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiPicker58
//  517 
//  518 void SampleApp_DeviceConnectRsp(uint8 *buf)
//  519 {
//  520 #if ZDO_COORDINATOR
//  521   
//  522 #else
//  523   SampleApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  524   SampleApp_TxAddr.endPoint = SAMPLEAPP_ENDPOINT;
//  525   SampleApp_TxAddr.addr.shortAddr = BUILD_UINT16(buf[1], buf[0]);
//  526   
//  527   HalLedSet(HAL_LED_2, HAL_LED_MODE_ON);
//  528   HalUARTWrite ( 0, "< connect success>\n", 23);
//  529 #endif
//  530 }
//  531 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  532 void SampleApp_ConnectReqProcess(uint8 *buf)
SampleApp_ConnectReqProcess:
        CFI Block cfiBlock59 Using cfiCommon0
        CFI Function SampleApp_ConnectReqProcess
        CODE
//  533 {
        FUNCALL SampleApp_ConnectReqProcess, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ConnectReqProcess, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ConnectReqProcess, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ConnectReqProcess, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ConnectReqProcess, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ConnectReqProcess, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ConnectReqProcess, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 42)
//  534   uint16 nwkAddr;
//  535   char buff[30] = {0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_4` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_4` & 0xff
        MOV     A,#0x1e
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  536   
//  537   SampleApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#SampleApp_TxAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  538   SampleApp_TxAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
//  539   SampleApp_TxAddr.addr.shortAddr = BUILD_UINT16(buf[1], buf[0]);
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        MOV     DPTR,#SampleApp_TxAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  540   nwkAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  541   
//  542   sprintf(buff, "self:%d   child:%d\r\n", nwkAddr, SampleApp_TxAddr.addr.shortAddr);
        ; Setup parameters for call to function sprintf
        MOV     DPTR,#SampleApp_TxAddr
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R4,#`?<Constant "self:%d   child:%d\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "self:%d   child:%d\\r\\n">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 42)
//  543   HalUARTWrite ( 0, (uint8*)buff, strlen(buff));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        LCALL   ?Subroutine5 & 0xFFFF
//  544   
//  545   buff[0] = HI_UINT16( nwkAddr );
??CrossCallReturnLabel_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  546   buff[1] = LO_UINT16( nwkAddr );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  547   
//  548   if ( AF_DataRequest( &SampleApp_TxAddr, &SampleApp_epDesc,
//  549                        SAMPLEAPP_CONNECTRSP_CLUSTER,
//  550                        2,
//  551                        (uint8*)buff,
//  552                        &SampleApp_MsgID, 
//  553                        0, 
//  554                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     ?V0 + 0,#SampleApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SampleApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 47)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 49)
        MOV     ?V0 + 0,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 51)
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 42)
//  555   {
//  556   }
//  557   else
//  558   {
//  559     // Error occurred in request to send.
//  560   }
//  561   
//  562   HalLedSet(HAL_LED_2, HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine6 & 0xFFFF
//  563   HalUARTWrite ( 0, "< connect success>\n", 23);
//  564 }
??CrossCallReturnLabel_7:
        MOV     A,#0x1e
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock59

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiPicker62 Using cfiCommon1
        CFI (cfiPicker62) NoFunction
        CFI (cfiPicker62) Picker
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x17
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "< connect success>\\n">` & 0xff
        MOV     R3,#(`?<Constant "< connect success>\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond63 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiPicker65 Using cfiCommon1
        CFI (cfiPicker65) NoFunction
        CFI (cfiPicker65) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        RET
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiPicker65

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for SampleApp_epDesc>`:
        DATA8
        DB 11
        DATA16
        DW SampleApp_TaskID
        DW SampleApp_SimpleDesc
        DATA8
        DB 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessMSGCmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessMSGCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_DeviceConnect?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_DeviceConnect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ConnectReqProcess?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ConnectReqProcess

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SampleApp">`:
        DB "SampleApp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "R:%d">`:
        DB "R:%d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "A:%d">`:
        DB "A:%d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_2`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "s:%d">`:
        DB "s:%d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_3`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "parent:%d   self:%d\\r\\n">`:
        DB "parent:%d   self:%d\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "< connect success>\\n">`:
        DB "< connect success>\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_4`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "self:%d   child:%d\\r\\n">`:
        DB "self:%d   child:%d\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1:
        DD 1

        END
// 
// 1 668 bytes in segment BANKED_CODE
//    42 bytes in segment BANK_RELAYS
//     6 bytes in segment XDATA_I
//     6 bytes in segment XDATA_ID
//   232 bytes in segment XDATA_ROM_C
//   127 bytes in segment XDATA_Z
// 
// 1 716 bytes of CODE  memory
//   228 bytes of CONST memory (+ 4 bytes shared)
//   133 bytes of XDATA memory
//
//Errors: none
//Warnings: 6
